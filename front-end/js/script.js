// H√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì v√† hi·ªÉn th·ªã d·ªØ li·ªáu
let weatherData = [];
let currentIndex = 0;
const daysToShow = 5; // Hi·ªÉn th·ªã 5 ng√†y
let chartInstance = null;
let isDragging = false;
let startX = 0;
let dragSensitivity = 50; // ƒê·ªô nh·∫°y khi k√©o (pixel)
let currentDatabase = "database.json"; // M·∫∑c ƒë·ªãnh l√† H√† N·ªôi

// H√†m l·∫•y bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt
function getWeatherIcon(weather) {
  const icons = {
    sunny: "‚òÄÔ∏è",
    rain: "üåßÔ∏è",
    cloudy: "‚òÅÔ∏è",
    "partly cloudy": "‚õÖ",
    thunderstorm: "‚õàÔ∏è",
    snow: "‚ùÑÔ∏è",
    mist: "üå´Ô∏è",
  };
  return icons[weather.toLowerCase()] || "‚õÖ";
}

// H√†m ƒë·ªãnh d·∫°ng ng√†y
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString("vi-VN", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });
}

// H√†m l·∫•y m√†u d·ª±a tr√™n nhi·ªát ƒë·ªô
function getTemperatureColor(temp) {
  if (temp <= 0) return "#00ffff";
  if (temp <= 10) return "#4a90e2";
  if (temp <= 20) return "#50c878";
  if (temp <= 30) return "#ffa500";
  return "#ff4500";
}

// H√†m chuy·ªÉn ƒë·ªïi h∆∞·ªõng gi√≥ th√†nh m≈©i t√™n
function getWindDirectionArrow(direction) {
  const arrows = {
    N: "‚Üë",
    NE: "‚Üó",
    E: "‚Üí",
    SE: "‚Üò",
    S: "‚Üì",
    SW: "‚Üô",
    W: "‚Üê",
    NW: "‚Üñ",
  };
  return arrows[direction] || direction;
}

// H√†m c·∫≠p nh·∫≠t th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i
function updateCurrentWeather(date) {
  // T√¨m d·ªØ li·ªáu th·ªùi ti·∫øt cho ng√†y ƒë∆∞·ª£c ch·ªçn
  const currentData = weatherData.find(
    (data) => formatDate(data.date) === date
  );

  if (currentData) {
    // C·∫≠p nh·∫≠t c√°c th√¥ng tin
    document.getElementById(
      "currentTemp"
    ).textContent = `${currentData.highTemperature}¬∞C`;
    document.getElementById("currentWeather").textContent = getWeatherText(
      currentData.weather
    );
    document.getElementById(
      "currentWindSpeed"
    ).textContent = `${currentData.windSpeed} km/h`;
    document.getElementById("currentWindDirection").textContent =
      currentData.windDirection;
    document.querySelector(".weather-icon").textContent = getWeatherIcon(
      currentData.weather
    );
    document.getElementById("currentDate").textContent = formatDate(
      currentData.date
    );
    document.getElementById("currentChanceRain").textContent =
      currentData.chance_rain;
  }
}

// H√†m chuy·ªÉn ƒë·ªïi m√£ th·ªùi ti·∫øt th√†nh text
function getWeatherText(code) {
  const weatherTypes = {
    sunny: "Sunny",
    partlyCloudy: "Partly Cloudy",
    cloudy: "Cloudy",
    rainy: "Rainy",
    thunderstorm: "Thunderstorm",
    snowy: "Snowy",
    foggy: "Foggy",
  };
  return weatherTypes[code] || code;
}

// H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn khu v·ª±c
function handleLocationChange() {
  const locationSelect = document.getElementById("locationSelect");
  currentDatabase = locationSelect.value;
  loadWeatherData();
}

async function loadWeatherData() {
  try {
    const response = await fetch(`./assets/data/${currentDatabase}`);
    if (!response.ok) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ ${currentDatabase}`);
    }
    weatherData = await response.json();

    // L·∫•y ng√†y hi·ªán t·∫°i (15/04/2025)
    const targetDate = "2025-04-15";

    // T√¨m v·ªã tr√≠ c·ªßa ng√†y hi·ªán t·∫°i trong d·ªØ li·ªáu
    const targetIndex = weatherData.findIndex(
      (data) => data.date === targetDate
    );

    if (targetIndex === -1) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ng√†y ƒë∆∞·ª£c ch·ªçn trong d·ªØ li·ªáu");
    }

    // T√≠nh to√°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu ƒë·ªÉ ng√†y hi·ªán t·∫°i n·∫±m gi·ªØa
    currentIndex = Math.max(0, targetIndex - Math.floor(daysToShow / 2));

    // ƒê·∫£m b·∫£o lu√¥n ƒë·ªß 5 ng√†y ƒë·ªÉ hi·ªÉn th·ªã
    if (currentIndex + daysToShow > weatherData.length) {
      currentIndex = Math.max(0, weatherData.length - daysToShow);
    }

    // L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho ng√†y hi·ªán t·∫°i
    const currentWeather = weatherData[targetIndex];

    // C·∫≠p nh·∫≠t th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i
    document.getElementById(
      "currentTemp"
    ).textContent = `${currentWeather.highTemperature}¬∞C`;
    document.getElementById("currentWeather").textContent = getWeatherText(
      currentWeather.weather
    );
    document.getElementById(
      "currentWindSpeed"
    ).textContent = `${currentWeather.windSpeed} km/h`;
    document.getElementById("currentWindDirection").textContent =
      currentWeather.windDirection;
    document.querySelector(".weather-icon").textContent = getWeatherIcon(
      currentWeather.weather
    );
    document.getElementById("currentDate").textContent = formatDate(
      currentWeather.date
    );
    document.getElementById("currentChanceRain").textContent =
      currentWeather.chance_rain;

    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
    updateChart();

    // Th√™m s·ª± ki·ªán k√©o cho bi·ªÉu ƒë·ªì
    const chartContainer = document.querySelector(".chart-container");
    const canvas = document.getElementById("temperatureChart");

    function handleDragStart(clientX) {
      isDragging = true;
      startX = clientX;
      chartContainer.style.cursor = "grabbing";
    }

    function handleDragMove(clientX) {
      if (!isDragging) return;
      const deltaX = clientX - startX;
      if (Math.abs(deltaX) > dragSensitivity) {
        const newIndex = currentIndex + (deltaX > 0 ? -1 : 1);
        if (newIndex >= 0 && newIndex + daysToShow <= weatherData.length) {
          currentIndex = newIndex;
          startX = clientX;
          updateChart();
        }
      }
    }

    function handleDragEnd() {
      isDragging = false;
      chartContainer.style.cursor = "grab";
    }

    // S·ª± ki·ªán chu·ªôt
    canvas.addEventListener("mousedown", (e) => {
      e.preventDefault();
      handleDragStart(e.clientX);
    });

    window.addEventListener("mousemove", (e) => {
      e.preventDefault();
      handleDragMove(e.clientX);
    });

    window.addEventListener("mouseup", () => {
      handleDragEnd();
    });

    // S·ª± ki·ªán c·∫£m ·ª©ng
    canvas.addEventListener("touchstart", (e) => {
      e.preventDefault();
      handleDragStart(e.touches[0].clientX);
    });

    window.addEventListener("touchmove", (e) => {
      e.preventDefault();
      handleDragMove(e.touches[0].clientX);
    });

    window.addEventListener("touchend", () => {
      handleDragEnd();
    });
  } catch (error) {
    console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}

function updateChart() {
  // L·∫•y d·ªØ li·ªáu cho 5 ng√†y
  const start = currentIndex;
  const end = Math.min(currentIndex + daysToShow, weatherData.length);
  const slicedData = weatherData.slice(start, end);

  // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
  const labels = slicedData.map((data) => formatDate(data.date));
  const highTemps = slicedData.map((data) => data.highTemperature);
  const lowTemps = slicedData.map((data) => data.lowTemperature);

  // T·∫°o bi·ªÉu ƒë·ªì m·ªõi
  const ctx = document.getElementById("temperatureChart").getContext("2d");

  if (chartInstance) {
    chartInstance.destroy();
  }

  chartInstance = new Chart(ctx, {
    type: "line",
    data: {
      labels: labels,
      datasets: [
        {
          label: "Nhi·ªát ƒë·ªô cao (¬∞C)",
          data: highTemps,
          borderColor: "#FF6B6B",
          backgroundColor: "#FF6B6B",
          fill: false,
          tension: 0.4,
          borderWidth: 3,
          pointRadius: 6,
          pointHoverRadius: 10,
          pointBackgroundColor: "#FFFFFF",
          pointBorderColor: "#FF6B6B",
          pointBorderWidth: 3,
          datalabels: {
            align: "top",
            formatter: (value) => `${value.toFixed(1)}¬∞`,
            color: "#FF6B6B",
            font: {
              size: 24,
              weight: "bold",
              family: "'Helvetica Neue', Arial, sans-serif",
            },
            padding: 8,
          },
        },
        {
          label: "Nhi·ªát ƒë·ªô th·∫•p (¬∞C)",
          data: lowTemps,
          borderColor: "#4ECDC4",
          backgroundColor: "#4ECDC4",
          fill: false,
          tension: 0.4,
          borderWidth: 3,
          pointRadius: 6,
          pointHoverRadius: 10,
          pointBackgroundColor: "#FFFFFF",
          pointBorderColor: "#4ECDC4",
          pointBorderWidth: 3,
          datalabels: {
            align: "bottom",
            formatter: (value) => `${value.toFixed(1)}¬∞`,
            color: "#4ECDC4",
            font: {
              size: 24,
              weight: "bold",
              family: "'Helvetica Neue', Arial, sans-serif",
            },
            padding: 8,
          },
        },
      ],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      layout: {
        padding: {
          top: 30,
          right: 20,
          bottom: 30,
          left: 20,
        },
      },
      scales: {
        y: {
          beginAtZero: false,
          min: Math.min(...lowTemps) - 5,
          max: Math.max(...highTemps) + 5,
          grid: {
            color: "rgba(200, 200, 200, 0.2)",
            drawBorder: false,
          },
          ticks: {
            font: {
              size: 25,
              weight: "500",
              family: "'Helvetica Neue', Arial, sans-serif",
            },
            padding: 20,
            callback: function (value) {
              return value.toFixed(1) + "¬∞C";
            },
            color: "#666666",
          },
        },
        x: {
          grid: {
            display: false,
          },
          ticks: {
            font: {
              size: 20,
              weight: "500",
              family: "'Helvetica Neue', Arial, sans-serif",
            },
            padding: 80,
            maxRotation: 0,
            minRotation: 0,
            callback: function (value, index) {
              const data = slicedData[index];
              return [
                formatDate(data.date),
                "",
                getWeatherIcon(data.weather),
                "",
                `${data.windSpeed} km/h`,
                "",
                getWindDirectionArrow(data.windDirection),
                "",
                `${data.chance_rain}%`,
              ];
            },
          },
        },
      },
      plugins: {
        legend: {
          display: true,
          position: "top",
          align: "center",
          labels: {
            font: {
              size: 16,
              weight: "bold",
              family: "'Helvetica Neue', Arial, sans-serif",
            },
            usePointStyle: true,
            padding: 20,
            color: "#333333",
          },
        },
        tooltip: {
          enabled: true,
          mode: "index",
          intersect: false,
          padding: 12,
          backgroundColor: "rgba(255, 255, 255, 0.95)",
          titleColor: "#333333",
          bodyColor: "#666666",
          borderColor: "rgba(0, 0, 0, 0.1)",
          borderWidth: 1,
          callbacks: {
            label: function (context) {
              let label = context.dataset.label || "";
              if (label) {
                label += ": ";
              }
              if (context.parsed.y !== null) {
                label += context.parsed.y.toFixed(1) + "¬∞C";
              }
              return label;
            },
          },
        },
        datalabels: {
          display: true,
        },
      },
    },
    plugins: [ChartDataLabels],
  });
}

function updateWeatherDetails() {
  // L·∫•y c√°c ph·∫ßn t·ª≠ hi·ªÉn th·ªã
  const dayLabels = document.querySelectorAll("#dayLabels div");
  const weatherIcons = document.querySelectorAll(".weather-icons div");
  const windSpeeds = document.querySelectorAll(".wind-speed");
  const windDirections = document.querySelectorAll(".wind-direction");
  const precipitationValues = document.querySelectorAll(".precipitation-value");
  const chanceRainValues = document.querySelectorAll(".chance-rain-value");

  // L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho 5 ng√†y hi·ªÉn th·ªã
  const displayData = weatherData.slice(currentIndex, currentIndex + 5);

  // C·∫≠p nh·∫≠t t·ª´ng ph·∫ßn t·ª≠
  displayData.forEach((data, index) => {
    // C·∫≠p nh·∫≠t ng√†y
    const date = new Date(data.date);
    const dayOfWeek = date.toLocaleDateString("vi-VN", { weekday: "short" });
    dayLabels[index].textContent = dayOfWeek;

    // C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt
    weatherIcons[index].textContent = getWeatherIcon(data.weather);

    // C·∫≠p nh·∫≠t t·ªëc ƒë·ªô gi√≥
    windSpeeds[index].textContent = data.windSpeed;

    // C·∫≠p nh·∫≠t h∆∞·ªõng gi√≥ v√† xoay m≈©i t√™n
    const arrowRotation = getWindDirectionRotation(data.windDirection);
    windDirections[index].style.transform = `rotate(${arrowRotation}deg)`;

    // C·∫≠p nh·∫≠t l∆∞·ª£ng m∆∞a
    precipitationValues[index].textContent = data.precipitation;

    // C·∫≠p nh·∫≠t kh·∫£ nƒÉng m∆∞a
    chanceRainValues[index].textContent = data.chance_rain;
  });
}

// Kh·ªüi t·∫°o
document.addEventListener("DOMContentLoaded", function () {
  // Th√™m s·ª± ki·ªán cho menu ch·ªçn khu v·ª±c
  document
    .getElementById("locationSelect")
    .addEventListener("change", handleLocationChange);

  // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
  loadWeatherData();
});
