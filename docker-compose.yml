x-airflow-common: &airflow-common
  build: .
  environment:
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR:-LocalExecutor}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}/${DATABASE_NAME}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-''}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES:-'false'}
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY:-''}
  env_file:
    - .env
    

services:
  # PostgreSQL database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Airflow webserver  
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      - ./dags:/opt/airflow/dags
      - ./weather_data:/opt/airflow/weather_data
      - ./plugins:/opt/airflow/plugins
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow scheduler  
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: unless-stopped
    volumes:
      - ./dags:/opt/airflow/dags
      - ./weather_data:/opt/airflow/weather_data
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - airflow-webserver

  # Airflow initialization
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: >
      -c " sleep 10 && airflow db init && airflow users create --username ${ADMIN_USERNAME} --firstname Admin --lastname User --role Admin --email ${ADMIN_EMAIL} --password ${ADMIN_PASSWORD} "
    depends_on:
      db:
        condition: service_healthy

# Persistent data volumes
volumes:
  postgres_data: # Database data